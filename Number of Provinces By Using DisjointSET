class DisjointSet
{

    vector<int> parent, size;

public:
    DisjointSet(int n)
    {

        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 1; i <= n; i++)
        {
            size[i] = 1;
            parent[i] = i;
        }
    }
    int findUltimateParent(int node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findUltimateParent(parent[node]); // store for future uses;
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if (ulp_u == ulp_v)
            return;
        if (size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else
        {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};


class Solution {
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        // code here
       set<pair<int,int>>edges;
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++)
            {
                if(adj[i][j]){
                  edges.insert({i,j});
                }
            }
        }
       V=edges.size();
       DisjointSet ds(V);
        for(auto it:edges)
        {
            int u=it.first,v=it.second;
            if(ds.findUltimateParent(u)!=ds.findUltimateParent(v))//check is it part of it or not
            {
                ds.unionBySize(u,v);
                
            }
        }
        set<int>s;
        for(auto it:edges)
        {
            int u=it.first;
            s.insert(ds.findUltimateParent(u));//find unique ultimate parent to discover diff component
        }
        return s.size();
        
    }
};
