class DisjointSet
{

    vector<int> parent, size;

public:
    DisjointSet(int n)
    {

        parent.resize(n);
        size.resize(n);
        for (int i = 0; i<n; i++)
        {
            size[i] = 1;
            parent[i] = i;
        }
    }
    int findUltimateParent(int node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findUltimateParent(parent[node]); // store for future uses;
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if (ulp_u == ulp_v)
            return;
        if (size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else
        {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};


class Solution {
    vector<int>a={-1,0,1,0};
    vector<int>b={0,-1,0,1};
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        // code here
        DisjointSet ds(n*m);
        vector<vector<int>>mat(n,vector<int>(m,0));
        int cnt=0;
        vector<int>ans;
        for(auto it:operators)
        {
          
           int x=it[0],y=it[1],nx,ny;
           if(mat[x][y])
           {
               ans.push_back(cnt);
               continue;
           }
           mat[x][y]=1;
           cnt++;
           int u=x*m+y;
           for(int j=0;j<4;j++)
           {
                nx=x+a[j];
                ny=y+b[j];
               if(nx>=0&&ny>=0&&nx<n&&ny<m)
               {
                   if(mat[nx][ny]==1)
                   {
                       int v=nx*m+ny;
                       if(ds.findUltimateParent(u)!=ds.findUltimateParent(v))
                       {
                           cnt--;//side is 1 so it will be connected then reduced by 1;
                           ds.unionBySize(u,v);
                       }
                      
                   }
               }
           }
           ans.push_back(cnt);
           
        }
     
      
        return ans;
        
    }
};
