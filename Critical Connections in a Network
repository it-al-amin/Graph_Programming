class Solution {
     vector<vector<int>>ans;
     int timer=1;
    void dfs(int node,int parent,vector<bool>&vis,vector<int>adj[],int tin[],int low[])
    {
       vis[node]=1;
       tin[node]=low[node]=timer;
       timer++;
       for(auto it:adj[node])
       {
           if(it==parent)
           {
               continue;
           }
           if(!vis[it])
           {
             dfs(it,node,vis,adj,tin,low);
             low[node]=min(low[node],low[it]);  //backtrack the lowest time and give it to me in low array;
// can this be a bridge to node to it
            if(low[it]>tin[node])//not componenet of it or not loop 
            {
                ans.push_back({it,node});
            }
           }
           else
           {
                low[node]=min(low[node],low[it]);
           }
       }
    }
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& con) {
       
        vector<int>adj[n];
        for(auto it:con)
        {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
         vector<bool>vis(n,0);
         int tin[n];
         int low[n];
         dfs(0,-1,vis,adj,tin,low);
         return ans;
    }
};
