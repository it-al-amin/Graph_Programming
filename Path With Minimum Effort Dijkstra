
int a[]={0,1,0,-1};
int b[]={1,0,-1,0};

class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        // Code here
        int n=heights.size();
        int m=heights[0].size();
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>>pq;
        vector<vector<int>>v(n,vector<int>(m,1e9));
        pq.push({0,{0,0}});
        v[0][0]=0;
        while(!pq.empty())
        {
          auto i=pq.top();
            pq.pop();
            int eff=i.first;
            int x=i.second.first;
            int y=i.second.second;
            if(x==n-1&&y==m-1)
            {
                return v[x][y];
            }
            for(int j=0;j<4;j++)
            {
                int nx=x+a[j];
                int ny=y+b[j];
                if(nx>=0&&ny>=0&&nx<n&&ny<m)
                {
                    int mx=max(abs(heights[x][y]-heights[nx][ny]),eff);
                    if(mx<v[nx][ny])
                    {
                        v[nx][ny]=mx;
                        pq.push({mx,{nx,ny}});
                        
                    }
                }
            }
        }
        return -1;
    }
};
