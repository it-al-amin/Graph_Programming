class DisjointSet
{

    vector<int> parent, size;

public:
    DisjointSet(int n)
    {

        parent.resize(n+1);
        size.resize(n+1);
        for (int i = 1; i <= n; i++)
        {
            size[i] = 1;
            parent[i] = i;
        }
    }
    int findUltimateParent(int node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findUltimateParent(parent[node]); // store for future uses;
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if (ulp_u == ulp_v)
            return;
        if (size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else
        {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
        int V = accounts.size();
        unordered_map<string, int> mp;
        DisjointSet ds(V);
        for (int i = 0; i < V; i++) {
            vector<string> v;
            string x;
            bool f=0;
            for (int j = 1; j < accounts[i].size(); j++) {
                x=accounts[i][j];
                if(mp.find(x)==mp.end())//not found
                {
                  
                    mp[x]=i;
                   
                }
                else
                {
                   ds.unionBySize(i,mp[x]);//since overleap add to connect mp[x] to i or vice versa;
                }
               
            }

           
        }
        vector<string>adj[V];
        for(auto it:mp)
        {
            string mail=it.first;
            int node=ds.findUltimateParent(mp[mail]);//ultimate parent same node connect to same node of adjacent list
            adj[node].push_back(mail);
        }
        vector<vector<string>>ans;
        for(int i=0;i<V;i++)
        {
            if(adj[i].size()==0)
            {
                continue;
            }
            sort(adj[i].begin(),adj[i].end());
            vector<string>temp;
            temp.push_back(accounts[i][0]);
            for(auto it:adj[i])
            {
                temp.push_back(it);
            }
            ans.push_back(temp);
            
        }
      
        return ans;
    }
};
