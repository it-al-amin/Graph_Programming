class DisjointSet
{

    vector<int> parent, size;

public:
    DisjointSet(int n)
    {

        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 1; i <= n; i++)
        {
            size[i] = 1;
            parent[i] = i;
        }
    }
    int findUltimateParent(int node)
    {
        if (node == parent[node])
        {
            return node;
        }
        return parent[node] = findUltimateParent(parent[node]); // store for future uses;
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUltimateParent(u);
        int ulp_v = findUltimateParent(v);
        if (ulp_u == ulp_v)
            return;
        if (size[ulp_u] < size[ulp_v])
        {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else
        {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
    
        vector<pair<int,int>>list;
        vector<pair<int,pair<int,int>>>edges;
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                int adjNode=it[0];
                int wt=it[1];
                edges.push_back({wt,{i,adjNode}});
            }
        }
        sort(edges.begin(),edges.end());
        int mnMST=0;
        DisjointSet ds(V);
        for(auto it:edges)
        {
            int w=it.first,u=it.second.first,v=it.second.second;
            if(ds.findUltimateParent(u)!= ds.findUltimateParent(v))
            {
                list.push_back({u,v});
                mnMST+=w;
                ds.unionBySize(u,v);
            }
        }
        return mnMST;
        
        
    }
};
